/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    java

    // Apply the application plugin to add support for building a CLI application
    application
    jacoco
}

val integration = configurations.create("integration").extendsFrom(configurations["testImplementation"])

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

sourceSets.create("integration") {
    java.srcDir("src/integration/java")
    resources.srcDir("src/integration/resources")
    compileClasspath += sourceSets["main"].output + configurations["testRuntimeClasspath"]
    runtimeClasspath += output + compileClasspath + sourceSets["test"].runtimeClasspath
}

dependencies {

    // This dependency is used by the application.
    implementation("com.google.guava:guava:28.0-jre")

    // Use JUnit test framework
    testImplementation("junit:junit:4.12")
    testImplementation("org.mockito:mockito-core:3.1.0")
    testImplementation("org.hamcrest:hamcrest:2.1")

    // Logging
//    implementation("org.slf4j:slf4j-api:1.7.25")
    implementation("ch.qos.logback:logback-classic:1.2.3")
//    implementation("ch.qos.logback:logback-core:1.2.3")
    implementation("net.openhft:chronicle-queue:5.17.25")
    implementation("com.esotericsoftware:kryo:5.0.0-RC4")


    // Functional & reactive programming
    implementation("io.vavr:vavr:0.9.3")
//    implementation("io.reactivex.rxjava2:rxjava:2.2.12")

    // Web server
    implementation("io.javalin:javalin:3.5.0")
    implementation("com.typesafe:config:1.4.0")
}

// TODO merge integration tests into coverage report
task<Test>("integration") {
    group = "verification"
    description = "runs integration tests"
    testClassesDirs = sourceSets["integration"].output.classesDirs
    classpath = sourceSets["integration"].runtimeClasspath
}

task<JavaExec>("chronicleDump") {
    group = "Execution"
    description = "Dump the chronicle queue to console"
    classpath = sourceSets["main"].runtimeClasspath
    main = "net.openhft.chronicle.queue.DumpQueueMain"
    args = listOf("/tmp/elevator")
}

application {
    // Define the main class for the application
    mainClassName = "elevator.App"
}
